/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component } from '@angular/core';
import { ConfirmationService } from 'primeng/api';
export class FeatureExplorerComponent {
    /**
     * @param {?} confirmationService
     */
    constructor(confirmationService) {
        this.confirmationService = confirmationService;
    }
    /* ngOnInit() {
        this.featuresTreeNodes$ = this.featuresManagement
          .select(getFeaturesToDisplay)
          .pipe(
            filter(Boolean),
            map((featuresState: FeatureState[]) =>
              featuresState.map(featureState =>
                this.getFeatureTreeNode(featureState, featureState.expaneded)
              )
            )
          );
      }*/
    /**
     * @return {?}
     */
    ngOnInit() { }
}
FeatureExplorerComponent.decorators = [
    { type: Component, args: [{
                selector: 'sc-feature-explorer',
                template: "<!--<ng-container *ngIf=\"featuresTreeNodes$ | async as featuresTreeNodes; else loading\">\n  <p-tree *ngIf=\"featuresTreeNodes.length > 0; else noFeatureFound\" class=\"features-tree\" [value]=\"featuresTreeNodes\"\n    (onNodeExpand)=\"expandFeatureNode($event.node)\" (onNodeCollapse)=\"collapseFeatureNode($event.node)\"\n    selectionMode=\"single\" [(selection)]=\"selectedNode\">\n    <ng-template let-node pTemplate=\"feature\">\n      <div class=\"custom-node-label\">\n        <div class=\"node-label\">\n          <span>{{ node.label }}</span>\n          <span class=\"node-count\">({{ node.count }})</span>\n        </div>\n        <div *ngIf=\"node.updated\" class=\"node-updated\">\n          <div class=\"indecator\"></div>\n        </div>\n        <div class=\"node-actions\">\n          <p-button class=\"add-screen\" (click)=\"openAddScreensDialog(node)\" icon=\"fa fa-fw fa-plus\"\n            pTooltip=\"Add Screen\" tooltipPosition=\"bottom\"></p-button>\n          <p-button class=\"remove-tree-node\" (click)=\"deleteFeature(node)\" icon=\"fa fa-fw fa-trash\" pTooltip=\"Delete\"\n            tooltipPosition=\"bottom\"></p-button>\n        </div>\n      </div>\n    </ng-template>\n\n    <ng-template let-node pTemplate=\"screen\">\n      <div class=\"custom-node-label\">\n        <span class=\"custom-node-icon\">\n          <i class=\"fas fa-link\" *ngIf=\"node.linked\" pTooltip=\"Linked to {{node.linked}} model\"\n            tooltipPosition=\"bottom\"></i>\n          <i class=\"fas fa-unlink\" *ngIf=\"!node.linked\" pTooltip=\"Not linked to a model\" tooltipPosition=\"bottom\"></i>\n        </span>\n        <div class=\"node-label\">\n          <span>{{ node.label }}</span>\n        </div>\n        <div *ngIf=\"node.updated\" class=\"node-updated\">\n          <div class=\"indecator\"></div>\n        </div>\n        <sc-policy-state-indicator [screenContent]=\"node.data\"></sc-policy-state-indicator>\n        <div class=\"node-actions\">\n          <p-button class=\"clone-node\" (click)=\"openCloneScreenDialo(node)\" icon=\"fa fa-fw fa-copy\" pTooltip=\"Clone\"\n            tooltipPosition=\"bottom\"></p-button>\n          <p-button class=\"edit-feature\" (click)=\"editFeatureScreen(node)\" icon=\"fa fa-fw fa-pen\" pTooltip=\"Edit\"\n            tooltipPosition=\"bottom\"></p-button>\n          <p-button class=\"preview-screen\" icon=\"fa fa-fw fa-eye\" (click)=\"preview(node)\" pTooltip=\"Preview\"\n            tooltipPosition=\"bottom\" showDelay=\"1000\" hideDelay=\"500\"></p-button>\n          <p-button class=\"remove-tree-node\" (click)=\"deleteScreen(node)\" icon=\"fa fa-fw fa-trash\" pTooltip=\"Delete\"\n            tooltipPosition=\"bottom\"></p-button>\n        </div>\n      </div>\n    </ng-template>\n  </p-tree>\n  <ng-template #noFeatureFound>\n    <span class=\"no-match-found-msg\">\n      No feature found\n    </span>\n  </ng-template>\n</ng-container>\n<ng-template #loading>\n  <span class=\"no-match-found-msg\">\n    loading\n  </span>\n</ng-template>\n-->\n",
                styles: [".no-match-found-msg{margin:-20px auto auto;padding:10px 85px;position:absolute;top:50%}:host ::ng-deep .ui-tree{width:100%;border:none}:host ::ng-deep .ui-tree .ui-treenode-selectable.ui-treenode-content:hover .node-actions .add-screen .ui-button{color:#5cb85c;-webkit-transition-duration:0s;transition-duration:0s}:host ::ng-deep .ui-tree .ui-treenode-selectable.ui-treenode-content:hover .node-actions .remove-tree-node .ui-button{color:#d84315;-webkit-transition-duration:0s;transition-duration:0s}:host ::ng-deep .ui-tree .ui-treenode-selectable.ui-treenode-content:hover .node-actions .clone-node .ui-button{color:#2399e5;-webkit-transition-duration:0s;transition-duration:0s}:host ::ng-deep .ui-tree .ui-treenode-selectable.ui-treenode-content:hover .node-actions .duplicate-tree-node .ui-button{color:#2399e5;-webkit-transition-duration:0s;transition-duration:0s}:host ::ng-deep .ui-tree .ui-treenode-selectable.ui-treenode-content:hover .node-actions .edit-feature .ui-button{color:#2399e5;-webkit-transition-duration:0s;transition-duration:0s}:host ::ng-deep .ui-tree .ui-treenode-selectable.ui-treenode-content:hover .node-actions .preview-screen .ui-button{color:#2399e5;-webkit-transition-duration:0s;transition-duration:0s}:host ::ng-deep .ui-treenode-label{width:calc(100% - 38px)}:host ::ng-deep .ui-treenode-children .ui-treenode-label{width:calc(100% - 24px)}:host ::ng-deep .custom-node-label{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;height:30px}:host ::ng-deep .custom-node-icon{font-size:12px;margin-left:-10px;margin-top:2px;margin-right:2px}:host ::ng-deep .custom-node-icon .fa-unlink{color:#d84315}:host ::ng-deep .node-updated .indecator{width:6px;height:6px;border-radius:50%;background:#78909c;margin-left:2px}:host ::ng-deep .node-label{max-width:190px;overflow:hidden;text-overflow:ellipsis}:host ::ng-deep .node-actions{margin-left:auto;margin-right:0}:host ::ng-deep .node-actions .ui-button{background:0 0;border:none}:host ::ng-deep .node-actions .ui-button:enabled:hover{background:0 0;border:none}:host ::ng-deep .node-actions .ui-button-icon-only{width:20px}:host ::ng-deep .node-actions .edit-feature .ui-button{color:#c6c6c6}:host ::ng-deep .node-actions .preview-screen .ui-button{color:#c6c6c6}:host ::ng-deep .node-actions .remove-tree-node .ui-button{color:#c6c6c6}:host ::ng-deep .node-actions .clone-node .ui-button{color:#c6c6c6}:host ::ng-deep .node-actions .add-screen .ui-button{color:#c6c6c6}:host ::ng-deep .ui-panel.ui-widget .ui-panel-titlebar{padding:0 10px;background:#e0e0e0}:host ::ng-deep .actions-container .ui-button-icon-only{width:1.5em}"]
            }] }
];
/** @nocollapse */
FeatureExplorerComponent.ctorParameters = () => [
    { type: ConfirmationService }
];
if (false) {
    /** @type {?} */
    FeatureExplorerComponent.prototype.featuresTreeNodes;
    /** @type {?} */
    FeatureExplorerComponent.prototype.selectedNode;
    /** @type {?} */
    FeatureExplorerComponent.prototype.featuresTreeNodes$;
    /**
     * @type {?}
     * @private
     */
    FeatureExplorerComponent.prototype.confirmationService;
}
//# sourceMappingURL=data:application/json;base64,